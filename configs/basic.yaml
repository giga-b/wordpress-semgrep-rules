# WordPress Core Security Rules - Basic Configuration
# Essential security rules for WordPress development with minimal false positives
# Optimized for CI/CD integration and fast scanning performance

rules:
  # ============================================================================
  # NONCE VERIFICATION RULES
  # ============================================================================
  
  # Critical nonce verification issues
  - id: wordpress.nonce.missing-verification
    languages: [php]
    message: "Nonce verification is missing. Use wp_verify_nonce() to verify the nonce before processing form data."
    severity: ERROR
    metadata:
      category: "nonce-verification"
      cwe: "CWE-352"
    patterns:
      - pattern: |
          if (isset($_POST['submit'])) {
            $data = $_POST['data'];
          }
      - pattern-not: |
          if (isset($_POST['submit'])) {
            if (wp_verify_nonce($_POST['_wpnonce'], 'action_name')) {
              $data = $_POST['data'];
            }
          }

  - id: wordpress.nonce.ajax-missing
    languages: [php]
    message: "AJAX request missing nonce verification. Use check_ajax_referer() or wp_verify_nonce()."
    severity: ERROR
    metadata:
      category: "nonce-verification"
      cwe: "CWE-352"
    patterns:
      - pattern: |
          add_action('wp_ajax_my_action', 'my_ajax_handler');
          function my_ajax_handler() {
            $data = $_POST['data'];
          }
      - pattern-not: |
          add_action('wp_ajax_my_action', 'my_ajax_handler');
          function my_ajax_handler() {
            check_ajax_referer('my_nonce_action', 'nonce');
            $data = $_POST['data'];
          }

  # ============================================================================
  # CAPABILITY CHECK RULES
  # ============================================================================
  
  # Critical capability check issues
  - id: wordpress.capability.missing-check
    languages: [php]
    message: "Missing capability check. Use current_user_can() to verify user permissions before performing sensitive operations."
    severity: ERROR
    metadata:
      category: "capability-checks"
      cwe: "CWE-285"
    patterns:
      - pattern: |
          if (isset($_POST['delete_user'])) {
            wp_delete_user($user_id);
          }
      - pattern-not: |
          if (isset($_POST['delete_user'])) {
            if (current_user_can('delete_users')) {
              wp_delete_user($user_id);
            }
          }

  - id: wordpress.capability.missing-admin-check
    languages: [php]
    message: "Missing admin capability check. Use current_user_can('manage_options') for admin-only operations."
    severity: ERROR
    metadata:
      category: "capability-checks"
      cwe: "CWE-285"
    patterns:
      - pattern: |
          if (isset($_POST['update_settings'])) {
            update_option('sensitive_setting', $_POST['value']);
          }
      - pattern-not: |
          if (isset($_POST['update_settings'])) {
            if (current_user_can('manage_options')) {
              update_option('sensitive_setting', sanitize_text_field($_POST['value']));
            }
          }

  - id: wordpress.capability.ajax-missing
    languages: [php]
    message: "AJAX handler missing capability check. Verify user permissions in AJAX callbacks."
    severity: ERROR
    metadata:
      category: "capability-checks"
      cwe: "CWE-285"
    patterns:
      - pattern: |
          add_action('wp_ajax_admin_action', 'admin_ajax_handler');
          function admin_ajax_handler() {
            update_option('setting', $_POST['value']);
          }
      - pattern-not: |
          add_action('wp_ajax_admin_action', 'admin_ajax_handler');
          function admin_ajax_handler() {
            if (current_user_can('manage_options')) {
              update_option('setting', sanitize_text_field($_POST['value']));
            }
          }

  # ============================================================================
  # SANITIZATION RULES
  # ============================================================================
  
  # Critical sanitization issues
  - id: wordpress.sanitization.missing-input
    languages: [php]
    message: "User input not sanitized. Use appropriate WordPress sanitization functions before using user data."
    severity: ERROR
    metadata:
      category: "sanitization-functions"
      cwe: "CWE-79"
    patterns:
      - pattern: |
          $data = $_POST['user_input'];
          echo $data;
      - pattern-not: |
          $data = sanitize_text_field($_POST['user_input']);
          echo $data;
      - pattern-not: |
          $data = wp_kses_post($_POST['user_input']);
          echo $data;
      - pattern-not: |
          $data = esc_html($_POST['user_input']);
          echo $data;

  - id: wordpress.sanitization.unsafe-db-query
    languages: [php]
    message: "Database query with unsanitized input. Use $wpdb->prepare() for safe database operations."
    severity: ERROR
    metadata:
      category: "sanitization-functions"
      cwe: "CWE-89"
    patterns:
      - pattern: |
          $user_input = $_POST['search'];
          $wpdb->query("SELECT * FROM posts WHERE title LIKE '%$user_input%'");
      - pattern-not: |
          $user_input = sanitize_text_field($_POST['search']);
          $wpdb->prepare("SELECT * FROM posts WHERE title LIKE %s", '%' . $wpdb->esc_like($user_input) . '%');

  - id: wordpress.sanitization.unsafe-output
    languages: [php]
    message: "Unsafe output without escaping. Use esc_html(), esc_attr(), or wp_kses_post() for safe output."
    severity: ERROR
    metadata:
      category: "sanitization-functions"
      cwe: "CWE-79"
    patterns:
      - pattern: |
          $user_data = $_POST['content'];
          echo $user_data;
      - pattern-not: |
          $user_data = wp_kses_post($_POST['content']);
          echo $user_data;
      - pattern-not: |
          $user_data = esc_html($_POST['content']);
          echo $user_data;

  # ============================================================================
  # SQL INJECTION PREVENTION
  # ============================================================================
  
  - id: wordpress.sql-injection.direct-query
    languages: [php]
    message: "Direct SQL query with user input. Use $wpdb->prepare() to prevent SQL injection."
    severity: ERROR
    metadata:
      category: "sql-injection"
      cwe: "CWE-89"
    patterns:
      - pattern: |
          $wpdb->query("SELECT * FROM $wpdb->posts WHERE ID = " . $_GET['id']);
      - pattern-not: |
          $wpdb->prepare("SELECT * FROM $wpdb->posts WHERE ID = %d", $_GET['id']);

  - id: wordpress.sql-injection.unsafe-insert
    languages: [php]
    message: "Unsafe database insert with user input. Use $wpdb->prepare() for safe inserts."
    severity: ERROR
    metadata:
      category: "sql-injection"
      cwe: "CWE-89"
    patterns:
      - pattern: |
          $wpdb->query("INSERT INTO posts (title, content) VALUES ('$title', '$content')");
      - pattern-not: |
          $wpdb->prepare("INSERT INTO posts (title, content) VALUES (%s, %s)", $title, $content);

  # ============================================================================
  # XSS PREVENTION
  # ============================================================================
  
  - id: wordpress.xss.unsafe-echo
    languages: [php]
    message: "Unsafe echo of user input. Use esc_html(), esc_attr(), or wp_kses_post() to prevent XSS."
    severity: ERROR
    metadata:
      category: "xss"
      cwe: "CWE-79"
    patterns:
      - pattern: |
          echo $_POST['user_input'];
      - pattern-not: |
          echo esc_html($_POST['user_input']);
      - pattern-not: |
          echo wp_kses_post($_POST['user_input']);

  - id: wordpress.xss.unsafe-attribute
    languages: [php]
    message: "Unsafe HTML attribute output. Use esc_attr() to prevent XSS in attributes."
    severity: ERROR
    metadata:
      category: "xss"
      cwe: "CWE-79"
    patterns:
      - pattern: |
          echo "<input value=\"" . $_POST['value'] . "\">";
      - pattern-not: |
          echo "<input value=\"" . esc_attr($_POST['value']) . "\">";

  # ============================================================================
  # FILE OPERATION SECURITY
  # ============================================================================
  
  - id: wordpress.file-operation.unsafe-path
    languages: [php]
    message: "Unsafe file operation with user input. Validate and sanitize file paths."
    severity: ERROR
    metadata:
      category: "file-operations"
      cwe: "CWE-22"
    patterns:
      - pattern: |
          include($_GET['file']);
      - pattern-not: |
          $file = sanitize_text_field($_GET['file']);
          if (file_exists($file) && strpos($file, 'safe_directory') === 0) {
            include($file);
          }

  - id: wordpress.file-operation.unsafe-upload
    languages: [php]
    message: "Unsafe file upload handling. Use wp_handle_upload() and validate file types."
    severity: ERROR
    metadata:
      category: "file-operations"
      cwe: "CWE-434"
    patterns:
      - pattern: |
          move_uploaded_file($_FILES['file']['tmp_name'], $_FILES['file']['name']);
      - pattern-not: |
          $upload = wp_handle_upload($_FILES['file'], array('test_form' => false));

  # ============================================================================
  # REST API SECURITY
  # ============================================================================
  
  - id: wordpress.rest-api.missing-authentication
    languages: [php]
    message: "REST API endpoint missing proper authentication. Use a proper permission_callback function."
    severity: ERROR
    metadata:
      category: "rest-api-security"
      cwe: "CWE-287"
    patterns:
      - pattern: |
          register_rest_route($namespace, $route, array(
            'methods' => $methods,
            'callback' => $callback,
            'permission_callback' => '__return_true'
          ));
      - pattern: |
          register_rest_route($namespace, $route, array(
            'methods' => $methods,
            'callback' => $callback
          ));

  - id: wordpress.rest-api.missing-input-validation
    languages: [php]
    message: "REST API endpoint missing input validation. Validate and sanitize all input parameters."
    severity: ERROR
    metadata:
      category: "rest-api-security"
      cwe: "CWE-20"
    patterns:
      - pattern: |
          function $FUNC($request) {
            $param = $request->get_param('$PARAM');
            return $param;
          }
      - pattern-not: |
          function $FUNC($request) {
            $param = $request->get_param('$PARAM');
            if (empty($param) || !is_string($param)) {
              return new WP_Error('invalid_param', 'Invalid parameter', array('status' => 400));
            }
            $param = sanitize_text_field($param);
            return $param;
          }

  - id: wordpress.rest-api.direct-param-output
    languages: [php]
    message: "REST API endpoint directly outputs user input. Sanitize and validate all output."
    severity: ERROR
    metadata:
      category: "rest-api-security"
      cwe: "CWE-79"
    patterns:
      - pattern: |
          function $FUNC($request) {
            $param = $request->get_param('$PARAM');
            echo $param;
          }
      - pattern-not: |
          function $FUNC($request) {
            $param = $request->get_param('$PARAM');
            $param = sanitize_text_field($param);
            return array('data' => $param);
          }

  - id: wordpress.rest-api.missing-nonce
    languages: [php]
    message: "REST API endpoint missing nonce verification for state-changing operations."
    severity: ERROR
    metadata:
      category: "rest-api-security"
      cwe: "CWE-352"
    patterns:
      - pattern: |
          register_rest_route($namespace, '/$endpoint', array(
            'methods' => 'POST',
            'callback' => $callback,
            'permission_callback' => function($request) {
              return current_user_can('$capability');
            }
          ));
      - pattern-not: |
          register_rest_route($namespace, '/$endpoint', array(
            'methods' => 'POST',
            'callback' => $callback,
            'permission_callback' => function($request) {
              return current_user_can('$capability') && wp_verify_nonce($request->get_header('X-WP-Nonce'), 'wp_rest');
            }
          ));

  # ============================================================================
  # AJAX SECURITY
  # ============================================================================
  
  - id: wordpress.ajax.unsafe-response
    languages: [php]
    message: "AJAX response using unsanitized data. Sanitize all data before sending response."
    severity: ERROR
    metadata:
      category: "ajax"
      cwe: "CWE-79"
    patterns:
      - pattern: |
          wp_send_json_success($_POST['data']);
      - pattern-not: |
          wp_send_json_success(sanitize_text_field($_POST['data']));

  - id: wordpress.ajax.missing-nonce
    languages: [php]
    message: "AJAX handler missing nonce verification. Use check_ajax_referer() for security."
    severity: ERROR
    metadata:
      category: "ajax"
      cwe: "CWE-352"
    patterns:
      - pattern: |
          add_action('wp_ajax_my_action', 'my_ajax_handler');
          function my_ajax_handler() {
            $data = $_POST['data'];
          }
      - pattern-not: |
          add_action('wp_ajax_my_action', 'my_ajax_handler');
          function my_ajax_handler() {
            check_ajax_referer('my_action_nonce', 'nonce');
            $data = $_POST['data'];
          }
