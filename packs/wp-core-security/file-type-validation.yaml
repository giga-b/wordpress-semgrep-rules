rules:
  # Warn when wp_handle_upload is used without any prior file type validation in the same function
  - id: wordpress.file.upload.missing-type-allowlist
    languages: [php]
    message: |
      wp_handle_upload used without explicit type allowlist (wp_checkfiletype[_and_ext])
      
      REMEDIATION: Implement explicit file type validation:
      1. Use wp_checkfiletype_and_ext() to validate file extension and MIME type
      2. Define allowed file types array: array('jpg', 'png', 'gif') 
      3. Pass 'mimes' option to wp_handle_upload() with allowed types
      4. Validate user capabilities with current_user_can('upload_files')
      5. Consider implementing additional content validation for critical uploads
    severity: WARNING
    metadata:
      category: file-operations
      cwe: CWE-434
      vuln_class: file_upload
      confidence: high
      tags: [warning, file-upload, wordpress, validation, file_upload]
      references:
        - https://developer.wordpress.org/plugins/security/securing-file-uploads/
    patterns:
      - pattern-inside: |
          function $HANDLER(...) {
            ...
          }
      - pattern: |
          $UPLOAD = wp_handle_upload($FILE, ...)
      # Combined type check exemptions using pattern-either
      - pattern-not-inside:
          pattern-either:
            - pattern-inside: |
                function $HANDLER(...) {
                  ...
                  wp_checkfiletype_and_ext(...);
                  ...
                }
            - pattern-inside: |
                function $HANDLER(...) {
                  ...
                  wp_checkfiletype(...);
                  ...
                }
      # Exempt if wp_handle_upload is called with a 'mimes' allowlist option (match common literal style)
      - pattern-not: |
          $UPLOAD = wp_handle_upload($FILE, array('mimes' => $MIMES, ...))
      # Exempt if upload is directly guarded by an allowlist block
      - pattern-not-inside: |
          if (in_array($TYPE['ext'], $ALLOWED, true)) {
            ...
            $UPLOAD = wp_handle_upload(...);
            ...
          }
      # Exempt if function uses negative allowlist guard (early return) anywhere
      - pattern-not-inside: |
          function $HANDLER(...) {
            ...
            if (!in_array(...)) {
              ...
            }
            ...
          }
      # Combined MIME validation exemptions using pattern-either
      - pattern-not-inside:
          pattern-either:
            - pattern-inside: |
                function $HANDLER(...) {
                  ...
                  $MIME = mime_content_type(...);
                  if (in_array($MIME, $ALLOWED, true)) {
                    ...
                  }
                }
            - pattern-inside: |
                function $HANDLER(...) {
                  ...
                  $FI = finfo_open(...);
                  $MIME = finfo_file($FI, ...);
                  if (in_array($MIME, $ALLOWED, true)) {
                    ...
                  }
                }

  # Warn when move_uploaded_file is used without a prior type allowlist in the same function
  - id: wordpress.file.upload.move.missing-type-allowlist
    languages: [php]
    message: |
      move_uploaded_file used without explicit type allowlist (wp_checkfiletype[_and_ext] or MIME allowlist)
      
      REMEDIATION: Implement proper file validation before move_uploaded_file:
      1. Use wp_checkfiletype_and_ext() to validate extension and MIME type
      2. Implement MIME validation via finfo_file() or mime_content_type()
      3. Use exif_imagetype() for image files to verify content
      4. Define explicit allowlist of permitted file types
      5. Validate file size against wp_max_upload_size() or custom limits
    severity: WARNING
    metadata:
      category: file-operations
      cwe: CWE-434
      vuln_class: file_upload
      confidence: high
      tags: [warning, file-upload, wordpress, validation, file_upload]
      references:
        - https://developer.wordpress.org/plugins/security/securing-file-uploads/
    patterns:
      - pattern-inside: |
          function $HANDLER(...) {
            ...
          }
      - pattern: |
          move_uploaded_file($_FILES[...]['tmp_name'], $DEST)
      # Combined WordPress helpers exemptions using pattern-either
      - pattern-not-inside:
          pattern-either:
            - pattern-inside: |
                function $HANDLER(...) {
                  ...
                  $TYPE = wp_checkfiletype_and_ext(...);
                  if (in_array($TYPE['ext'], $ALLOWED, true)) {
                    ...
                  }
                }
            - pattern-inside: |
                function $HANDLER(...) {
                  ...
                  $TYPE = wp_checkfiletype(...);
                  if (in_array($TYPE['ext'], $ALLOWED, true)) {
                    ...
                  }
                }
      # Combined MIME allowlist exemptions using pattern-either
      - pattern-not-inside:
          pattern-either:
            - pattern-inside: |
                function $HANDLER(...) {
                  ...
                  if (in_array($FILE['type'], $ALLOWED_TYPES, true)) {
                    ...
                  }
                }
            - pattern-inside: |
                function $HANDLER(...) {
                  ...
                  $MIME = mime_content_type(...);
                  if (in_array($MIME, $ALLOWED, true)) {
                    ...
                  }
                }
            - pattern-inside: |
                function $HANDLER(...) {
                  ...
                  $FI = finfo_open(...);
                  $MIME = finfo_file($FI, ...);
                  if (in_array($MIME, $ALLOWED, true)) {
                    ...
                  }
                }

  # Error when move_uploaded_file to unsanitized/unsafe destination
  - id: wordpress.file.upload.unsafe-move-no-sanitize
    languages: [php]
    message: |
      move_uploaded_file to destination without sanitize_file_name or wp_unique_filename
      
      REMEDIATION: Implement proper filename sanitization and path handling:
      1. Use sanitize_file_name() to clean the uploaded filename
      2. Use wp_unique_filename() to prevent filename conflicts
      3. Store files under wp_upload_dir()['path'] for proper WordPress structure
      4. Avoid user-controlled directory paths in destination
      5. Consider using wp_handle_upload() which handles these automatically
    severity: ERROR
    metadata:
      category: file-operations
      cwe: CWE-434
      vuln_class: file_upload
      confidence: high
      tags: [error, file-upload, wordpress, file_upload]
      references:
        - https://developer.wordpress.org/plugins/security/securing-file-uploads/
    patterns:
      - pattern: |
          move_uploaded_file($_FILES[...]['tmp_name'], $DEST)
      - pattern-not: |
          move_uploaded_file($_FILES[...]['tmp_name'], sanitize_file_name(...))
      - pattern-not: |
          move_uploaded_file($_FILES[...]['tmp_name'], $DIR . '/' . sanitize_file_name(...))
      - pattern-not: |
          move_uploaded_file($_FILES[...]['tmp_name'], wp_unique_filename($UPLOADS['path'], ...))
      - pattern-not: |
          move_uploaded_file($_FILES[...]['tmp_name'], $UPLOADS['path'] . '/' . wp_unique_filename($UPLOADS['path'], ...))

  # Error when user-controlled directory is used as upload destination (path traversal risk)
  - id: wordpress.file.upload.path-traversal.user-dir
    languages: [php]
    message: |
      User-controlled directory used in upload destination; validate and restrict to wp_upload_dir
      
      REMEDIATION: Restrict upload destinations to WordPress upload directory:
      1. Use wp_upload_dir()['path'] as the base directory for uploads
      2. Never use user-controlled paths in upload destinations
      3. Implement path traversal protection with realpath() validation
      4. Use wp_unique_filename() to generate safe filenames
      5. Consider using wp_handle_upload() which handles path security automatically
    severity: ERROR
    metadata:
      category: file-operations
      cwe: CWE-22
      vuln_class: file_upload
      confidence: high
      tags: [error, file-upload, wordpress, path-traversal, file_upload]
      references:
        - https://developer.wordpress.org/plugins/security/securing-file-uploads/
    pattern-either:
      - patterns:
          - pattern-inside: |
              function $HANDLER(...) {
                ...
                $DIR = $_POST[...];
                ...
              }
          - pattern: |
              move_uploaded_file($SRC['tmp_name'], $DIR . '/' . $NAME)
      - patterns:
          - pattern: |
              $DIR = $_POST[...];
          - pattern: |
              move_uploaded_file($SRC['tmp_name'], $DIR . '/' . $NAME)
      - patterns:
          - pattern-inside: |
              function $HANDLER(...) {
                ...
                $DIR = $_GET[...];
                ...
              }
          - pattern: |
              move_uploaded_file($SRC['tmp_name'], $DIR . '/' . $NAME)
      - patterns:
          - pattern: |
              $DIR = $_GET[...];
          - pattern: |
              move_uploaded_file($SRC['tmp_name'], $DIR . '/' . $NAME)
      - patterns:
          - pattern-inside: |
              function $HANDLER(...) {
                ...
                $DIR = $_REQUEST[...];
                ...
              }
          - pattern: |
              move_uploaded_file($SRC['tmp_name'], $DIR . '/' . $NAME)
      - patterns:
          - pattern: |
              $DIR = $_REQUEST[...];
          - pattern: |
              move_uploaded_file($SRC['tmp_name'], $DIR . '/' . $NAME)
      - pattern: |
          move_uploaded_file($SRC['tmp_name'], $_POST[...] . '/' . $NAME)
      - pattern: |
          move_uploaded_file($SRC['tmp_name'], $_GET[...] . '/' . $NAME)
      - pattern: |
          move_uploaded_file($SRC['tmp_name'], $_REQUEST[...] . '/' . $NAME)

      # Generic constraint form: directory variable must be user input
      - patterns:
          - pattern: |
              move_uploaded_file($SRC['tmp_name'], $USERDIR . '/' . $NAME)
          - metavariable-pattern:
              metavariable: $USERDIR
              pattern: |
                $_POST[...]
      - patterns:
          - pattern: |
              move_uploaded_file($SRC['tmp_name'], $USERDIR . '/' . $NAME)
          - metavariable-pattern:
              metavariable: $USERDIR
              pattern: |
                $_GET[...]
      - patterns:
          - pattern: |
              move_uploaded_file($SRC['tmp_name'], $USERDIR . '/' . $NAME)
          - metavariable-pattern:
              metavariable: $USERDIR
              pattern: |
                $_REQUEST[...]

  # Error when unzip_file is used with untrusted destination (path traversal risk)
  - id: wordpress.file.unzip.path-traversal
    languages: [php]
    message: unzip_file used with untrusted destination; validate and restrict to wp_upload_dir
    severity: ERROR
    metadata:
      category: file-operations
      cwe: CWE-22
      vuln_class: file_upload
      confidence: high
      tags: [error, wordpress, path-traversal, file_upload]
      references:
        - https://developer.wordpress.org/plugins/security/securing-file-uploads/
    patterns:
      - pattern-either:
          - patterns:
              - pattern-inside: |
                  function $HANDLER(...) {
                    ...
                    $DEST = $_POST[...];
                    ...
                  }
              - pattern: |
                  unzip_file(..., $DEST)
          - patterns:
              - pattern-inside: |
                  function $HANDLER(...) {
                    ...
                    $DEST = $_GET[...];
                    ...
                  }
              - pattern: |
                  unzip_file(..., $DEST)
          - pattern: |
              unzip_file(..., $_POST[...])
          - pattern: |
              unzip_file(..., $_GET[...])

  # Error when unzip_file is used on a user-controlled archive path (zip slip risk)
  - id: wordpress.file.unzip.user-controlled-archive
    languages: [php]
    message: unzip_file called on user-controlled archive; validate and restrict inputs
    severity: ERROR
    metadata:
      category: file-operations
      cwe: CWE-22
      vuln_class: file_upload
      confidence: high
      tags: [error, wordpress, path-traversal, file_upload]
    patterns:
      - pattern-either:
          - patterns:
              - pattern-inside: |
                  function $HANDLER(...) {
                    ...
                    $ZIP = $_POST[...];
                    ...
                  }
              - pattern: |
                  unzip_file($ZIP, ...)
          - patterns:
              - pattern-inside: |
                  function $HANDLER(...) {
                    ...
                    $ZIP = $_GET[...];
                    ...
                  }
              - pattern: |
                  unzip_file($ZIP, ...)
          - patterns:
              - pattern: |
                  $ZIP = $_GET[...];
              - pattern: |
                  unzip_file($ZIP, ...)
          - patterns:
              - pattern: |
                  $ZIP = $_POST[...];
              - pattern: |
                  unzip_file($ZIP, ...)

  # Warn when move_uploaded_file is used without any size limit validation in the same function
  - id: wordpress.file.upload.missing-size-check
    languages: [php]
    message: |
      move_uploaded_file used without file size validation (compare $_FILES['...']['size'] to a limit or wp_max_upload_size())
      
      REMEDIATION: Implement file size validation before upload:
      1. Check $_FILES['file']['size'] against wp_max_upload_size()
      2. Implement custom size limits for specific upload types
      3. Validate size before processing or moving the file
      4. Consider using wp_handle_upload() which handles size validation
      5. Add user-friendly error messages for oversized files
    severity: WARNING
    metadata:
      category: file-operations
      cwe: CWE-434
      vuln_class: file_upload
      confidence: high
      tags: [warning, file-upload, wordpress, validation, file_upload]
      references:
        - https://developer.wordpress.org/plugins/security/securing-file-uploads/
    patterns:
      - pattern-inside: |
          function $HANDLER(...) {
            ...
          }
      - pattern: |
          move_uploaded_file($SRC['tmp_name'], $DEST)
      # Combined size validation exemptions using pattern-either
      - pattern-not-inside:
          pattern-either:
            # Direct $_FILES size checks
            - pattern-inside: |
                function $HANDLER(...) {
                  ...
                  if ($_FILES[...]['size'] > $MAX) { ... }
                  ...
                }
            - pattern-inside: |
                function $HANDLER(...) {
                  ...
                  if ($_FILES[...]['size'] >= $MAX) { ... }
                  ...
                }
            # Local $FILE variable size checks
            - pattern-inside: |
                function $HANDLER(...) {
                  ...
                  $FILE = $_FILES[...];
                  if ($FILE['size'] > $MAX) { ... }
                  ...
                }
            - pattern-inside: |
                function $HANDLER(...) {
                  ...
                  $FILE = $_FILES[...];
                  if ($FILE['size'] >= $MAX) { ... }
                  ...
                }
            # Source variable size checks
            - pattern-inside: |
                function $HANDLER(...) {
                  ...
                  if ($SRC['size'] > $MAX) { ... }
                  ...
                }
            - pattern-inside: |
                function $HANDLER(...) {
                  ...
                  if ($SRC['size'] >= $MAX) { ... }
                  ...
                }
            # wp_max_upload_size() checks
            - pattern-inside: |
                function $HANDLER(...) {
                  ...
                  if ($_FILES[...]['size'] > wp_max_upload_size()) { ... }
                  ...
                }
            - pattern-inside: |
                function $HANDLER(...) {
                  ...
                  $FILE = $_FILES[...];
                  if ($FILE['size'] > wp_max_upload_size()) { ... }
                  ...
                }

  # Warn when file upload is performed without a malware/antivirus scanning step
  - id: wordpress.file.upload.missing-malware-scan
    languages: [php]
    message: File upload handling without malware scanning; scan the file before moving or after upload
    severity: WARNING
    metadata:
      category: file-operations
      cwe: CWE-693
      vuln_class: file_upload
      confidence: high
      tags: [warning, file-upload, wordpress, malware-scan, antivirus, file_upload]
      references:
        - https://developer.wordpress.org/plugins/security/securing-file-uploads/
    pattern-either:
      - patterns:
          - pattern-inside: |
              function $HANDLER(...) {
                ...
              }
          - pattern: |
              move_uploaded_file($SRC['tmp_name'], $DEST)
          # Combined scanning function exemptions using pattern-either
          - pattern-not-inside:
              pattern-either:
                # Generic scanning functions
                - pattern-inside: |
                    function $HANDLER(...) {
                      ...
                      scan_uploaded_file(...);
                      ...
                    }
                - pattern-inside: |
                    function $HANDLER(...) {
                      ...
                      scan_uploaded_file($SRC['tmp_name']);
                      ...
                    }
                - pattern-inside: |
                    function $HANDLER(...) {
                      ...
                      scan_file_for_malware(...);
                      ...
                    }
                - pattern-inside: |
                    function $HANDLER(...) {
                      ...
                      scan_file_for_malware($SRC['tmp_name']);
                      ...
                    }
                - pattern-inside: |
                    function $HANDLER(...) {
                      ...
                      malware_scan(...);
                      ...
                    }
                - pattern-inside: |
                    function $HANDLER(...) {
                      ...
                      malware_scan($SRC['tmp_name']);
                      ...
                    }
                - pattern-inside: |
                    function $HANDLER(...) {
                      ...
                      antivirus_scan(...);
                      ...
                    }
                - pattern-inside: |
                    function $HANDLER(...) {
                      ...
                      antivirus_scan($SRC['tmp_name']);
                      ...
                    }
                - pattern-inside: |
                    function $HANDLER(...) {
                      ...
                      clamav_scanfile(...);
                      ...
                    }
                - pattern-inside: |
                    function $HANDLER(...) {
                      ...
                      clamav_scanfile($SRC['tmp_name']);
                      ...
                    }
                - pattern-inside: |
                    function $HANDLER(...) {
                      ...
                      clamscan(...);
                      ...
                    }
                - pattern-inside: |
                    function $HANDLER(...) {
                      ...
                      clamscan($SRC['tmp_name']);
                      ...
                    }
          # Combined size limit check exemptions using pattern-either
          - pattern-not-inside:
              pattern-either:
                - pattern-inside: |
                    function $HANDLER(...) {
                      ...
                      if ($_FILES[...]['size'] > $MAX) { ... }
                      ...
                    }
                - pattern-inside: |
                    function $HANDLER(...) {
                      ...
                      $FILE = $_FILES[...];
                      if ($FILE['size'] > $MAX) { ... }
                      ...
                    }
                - pattern-inside: |
                    function $HANDLER(...) {
                      ...
                      if ($SRC['size'] > $MAX) { ... }
                      ...
                    }
                - pattern-inside: |
                    function $HANDLER(...) {
                      ...
                      if ($_FILES[...]['size'] > wp_max_upload_size()) { ... }
                      ...
                    }
                - pattern-inside: |
                    function $HANDLER(...) {
                      ...
                      $FILE = $_FILES[...];
                      if ($FILE['size'] > wp_max_upload_size()) { ... }
                      ...
                    }

  # Warn when malware scan is called but its result is not used to gate the move/acceptance
  - id: wordpress.file.upload.malware-scan.result-not-checked
    languages: [php]
    message: Malware scan called but result not used to gate upload; check result and abort on failure before moving
    severity: WARNING
    metadata:
      category: file-operations
      cwe: CWE-693
      vuln_class: file_upload
      confidence: medium
      tags: [warning, file-upload, wordpress, malware-scan, antivirus, file_upload]
      references:
        - https://developer.wordpress.org/plugins/security/securing-file-uploads/
    patterns:
      - pattern-either:
          - patterns:
              - pattern-inside: |
                  function $HANDLER(...) {
                    ...
                  }
              - pattern: |
                  $SCAN = scan_uploaded_file($SRC)
              - pattern: |
                  move_uploaded_file($SRC, $DEST)
              # Exempt when the scan result is used in a conditional gate
              - pattern-not-inside: |
                  function $HANDLER(...) {
                    ...
                    if (scan_uploaded_file($SRC)) {
                      ...
                      move_uploaded_file($SRC, $DEST);
                      ...
                    }
                    ...
                  }
              - pattern-not-inside: |
                  function $HANDLER(...) {
                    ...
                    if (!scan_uploaded_file($SRC)) { return; }
                    ...
                    move_uploaded_file($SRC, $DEST);
                    ...
                  }
          - patterns:
              - pattern-inside: |
                  function $HANDLER(...) {
                    ...
                  }
              - pattern: |
                  scan_file_for_malware($SRC)
              - pattern: |
                  move_uploaded_file($SRC, $DEST)
              - pattern-not-inside: |
                  function $HANDLER(...) {
                    ...
                    if (scan_file_for_malware($SRC)) {
                      ...
                      move_uploaded_file($SRC, $DEST);
                      ...
                    }
                    ...
                  }
          - patterns:
              - pattern: |
                  $RES = scan_uploaded_file($_FILES[...]['tmp_name'])
              - pattern: |
                  move_uploaded_file($_FILES[...]['tmp_name'], $DEST)

  # Warn when malware scan is performed only after moving the file to destination
  - id: wordpress.file.upload.malware-scan.after-move
    languages: [php]
    message: Malware scanning performed after moving file; scan before moving to reduce exposure
    severity: WARNING
    metadata:
      category: file-operations
      cwe: CWE-693
      vuln_class: file_upload
      confidence: medium
      tags: [warning, file-upload, wordpress, malware-scan, antivirus, file_upload]
      references:
        - https://developer.wordpress.org/plugins/security/securing-file-uploads/
    patterns:
      - pattern-inside: |
          function $HANDLER(...) {
            ...
          }
      - pattern: |
          move_uploaded_file($SRC, $DEST)
      - pattern-either:
          - pattern: |
              scan_uploaded_file($DEST)
          - pattern: |
              scan_file_for_malware($DEST)
          - pattern: |
              antivirus_scan($DEST)
          - pattern: |
              clamav_scanfile($DEST)
          - pattern: |
              clamscan($DEST)
      # Common literal style: move then scan destination
      - pattern: |
          move_uploaded_file($_FILES[...]['tmp_name'], $DEST)
      - pattern-either:
          - pattern: |
              scan_uploaded_file($DEST)
          - pattern: |
              scan_file_for_malware($DEST)

  # Warn when asynchronous/background scan is enqueued after storing file directly in final/public uploads directory without a quarantine step
  - id: wordpress.file.upload.missing-quarantine.for-async-scan
    languages: [php]
    message: Asynchronous scan enqueued after moving file to final destination; store in a quarantine directory first, then publish after scan
    severity: WARNING
    metadata:
      category: file-operations
      cwe: CWE-693
      vuln_class: file_upload
      confidence: medium
      tags: [warning, file-upload, wordpress, malware-scan, quarantine, file_upload]
      references:
        - https://developer.wordpress.org/plugins/security/securing-file-uploads/
    patterns:
      - pattern-inside: |
          function $HANDLER(...) {
            ...
          }
      - pattern: |
          move_uploaded_file($SRC, $DEST)
      - pattern-either:
          - pattern: |
              enqueue_scan_task($DEST)
          - pattern: |
              schedule_scan($DEST)
          - pattern: |
              queue_malware_scan($DEST)
      # Exempt when moved to an isolated quarantine or system temp directory first

  # Warn when MIME/type validation relies on client-provided content type (weak validation)
  - id: wordpress.file.upload.weak-mime-validation
    languages: [php]
    message: Weak MIME validation using client-provided type ($_FILES['...']['type']); use finfo_file/mime_content_type or wp_checkfiletype_and_ext
    severity: WARNING
    metadata:
      category: file-operations
      cwe: CWE-20
      vuln_class: file_upload
      confidence: high
      tags: [warning, file-upload, wordpress, validation, mime, file_upload]
      references:
        - https://developer.wordpress.org/plugins/security/securing-file-uploads/
    patterns:
      - pattern-either:
          # Case 1: Direct in_array allowlist using client-provided type
          - patterns:
              - pattern-inside: |
                  function $HANDLER(...) {
                    ...
                  }
              - pattern-inside: |
                  if (in_array($_FILES[...]['type'], $ALLOWED, ...)) {
                    ...
                  }
              - pattern-inside: |
                  function $HANDLER(...) {
                    ...
                    move_uploaded_file($_FILES[...]['tmp_name'], $DEST);
                    ...
                  }
              # Exempt if robust MIME validation is present in the same handler
              - pattern-not-inside: |
                  function $HANDLER(...) {
                    ...
                    $FI = finfo_open(...);
                    $MIME = finfo_file($FI, ...);
                    if (in_array($MIME, $ALLOWED, ...)) { ... }
                    ...
                  }
              - pattern-not-inside: |
                  function $HANDLER(...) {
                    ...
                    $MIME = mime_content_type(...);
                    if (in_array($MIME, $ALLOWED, ...)) { ... }
                    ...
                  }
              - pattern-not-inside: |
                  function $HANDLER(...) {
                    ...
                    $TYPE = wp_checkfiletype_and_ext(...);
                    if (in_array($TYPE['ext'], $ALLOWED, ...)) { ... }
                    ...
                  }
          # Case 2: Equality/regex checks on client-provided type
          - patterns:
              - pattern-inside: |
                  function $HANDLER(...) {
                    ...
                  }
              - pattern-either:
                  - pattern-inside: |
                      if ($_FILES[...]['type'] == $EXPECTED || $_FILES[...]['type'] === $EXPECTED) { ... }
                  - pattern-inside: |
                      if ($FILE['type'] == $EXPECTED || $FILE['type'] === $EXPECTED) { ... }
                  - pattern-inside: |
                      if (preg_match($RE, $_FILES[...]['type'])) { ... }
              - pattern-inside: |
                  function $HANDLER(...) {
                    ...
                    move_uploaded_file($_FILES[...]['tmp_name'], $DEST);
                    ...
                  }
              # Exempt if robust MIME validation is present in the same handler
              - pattern-not-inside: |
                  function $HANDLER(...) {
                    ...
                    $FI = finfo_open(...);
                    $MIME = finfo_file($FI, ...);
                    if (in_array($MIME, $ALLOWED, ...)) { ... }
                    ...
                  }
              - pattern-not-inside: |
                  function $HANDLER(...) {
                    ...
                    $MIME = mime_content_type(...);
                    if (in_array($MIME, $ALLOWED, ...)) { ... }
                    ...
                  }
              - pattern-not-inside: |
                  function $HANDLER(...) {
                    ...
                    $TYPE = wp_checkfiletype_and_ext(...);
                    if (in_array($TYPE['ext'], $ALLOWED, ...)) { ... }
                    ...
                  }
          - patterns:
              - pattern-inside: |
                  function $HANDLER(...) {
                    ...
                  }
              - pattern: |
                  $UPLOAD = wp_handle_upload($FILE, ...)
              # Exempt if a scanning function is called anywhere in the same handler
              - pattern-not-inside: |
                  function $HANDLER(...) {
                    ...
                    scan_uploaded_file(...);
                    ...
                  }
              - pattern-not-inside: |
                  function $HANDLER(...) {
                    ...
                    scan_uploaded_file($UPLOAD['file']);
                    ...
                  }
              - pattern-not: |
                  scan_uploaded_file(...)
              - pattern-not-inside: |
                  function $HANDLER(...) {
                    ...
                    scan_file_for_malware(...);
                    ...
                  }
              - pattern-not-inside: |
                  function $HANDLER(...) {
                    ...
                    scan_file_for_malware($UPLOAD['file']);
                    ...
                  }
              - pattern-not: |
                  scan_file_for_malware(...)
              - pattern-not-inside: |
                  function $HANDLER(...) {
                    ...
                    malware_scan(...);
                    ...
                  }
              - pattern-not-inside: |
                  function $HANDLER(...) {
                    ...
                    malware_scan($UPLOAD['file']);
                    ...
                  }
              - pattern-not: |
                  malware_scan(...)
              - pattern-not-inside: |
                  function $HANDLER(...) {
                    ...
                    antivirus_scan(...);
                    ...
                  }
              - pattern-not-inside: |
                  function $HANDLER(...) {
                    ...
                    antivirus_scan($UPLOAD['file']);
                    ...
                  }
              - pattern-not: |
                  antivirus_scan(...)
              - pattern-not-inside: |
                  function $HANDLER(...) {
                    ...
                    clamav_scanfile(...);
                    ...
                  }
              - pattern-not-inside: |
                  function $HANDLER(...) {
                    ...
                    clamav_scanfile($UPLOAD['file']);
                    ...
                  }
              - pattern-not: |
                  clamav_scanfile(...)
              - pattern-not-inside: |
                  function $HANDLER(...) {
                    ...
                    clamscan(...);
                    ...
                  }
              - pattern-not-inside: |
                  function $HANDLER(...) {
                    ...
                    clamscan($UPLOAD['file']);
                    ...
                  }
              - pattern-not: |
                  clamscan(...)
              # Exempt if a size limit check exists in the same handler
              - pattern-not-inside: |
                  function $HANDLER(...) {
                    ...
                    if ($_FILES[...]['size'] > $MAX) { ... }
                    ...
                  }
              - pattern-not-inside: |
                  function $HANDLER(...) {
                    ...
                    $FILE = $_FILES[...];
                    if ($FILE['size'] > $MAX) { ... }
                    ...
                  }
              - pattern-not-inside: |
                  function $HANDLER(...) {
                    ...
                    if ($_FILES[...]['size'] > wp_max_upload_size()) { ... }
                    ...
                  }
              - pattern-not-inside: |
                  function $HANDLER(...) {
                    ...
                    $FILE = $_FILES[...];
                    if ($FILE['size'] > wp_max_upload_size()) { ... }
                    ...
                  }

  # Warn when uploads do not perform any content analysis (magic number/image parsing) before moving/handling
  - id: wordpress.file.upload.missing-content-analysis
    languages: [php]
    message: |
      File upload handling without content analysis (magic number/image parsing). Use exif_imagetype/getimagesize or parse bytes before moving.
      
      REMEDIATION: Implement content-based file validation:
      1. Use exif_imagetype() to verify image file headers
      2. Use getimagesize() to validate image dimensions and type
      3. Implement magic number validation for specific file types
      4. Parse file content before moving to detect malicious files
      5. Consider using wp_handle_upload() with proper MIME validation
    severity: WARNING
    metadata:
      category: file-operations
      cwe: CWE-693
      vuln_class: file_upload
      confidence: high
      tags: [warning, file-upload, wordpress, content-analysis, file_upload]
      references:
        - https://developer.wordpress.org/plugins/security/securing-file-uploads/
    pattern-either:
      - patterns:
          - pattern-inside: |
              function $HANDLER(...) {
                ...
              }
          - pattern: |
              move_uploaded_file($_FILES[...]['tmp_name'], $DEST)
          # Combined content analysis exemptions using pattern-either
          - pattern-not-inside:
              pattern-either:
                - pattern-inside: |
                    function $HANDLER(...) {
                      ...
                      exif_imagetype(...);
                      ...
                    }
                - pattern-inside: |
                    function $HANDLER(...) {
                      ...
                      getimagesize(...);
                      ...
                    }
                - pattern-inside: |
                    function $HANDLER(...) {
                      ...
                      $DATA = file_get_contents(...);
                      ...
                    }
                - pattern-inside: |
                    function $HANDLER(...) {
                      ...
                      imagecreatefromstring(...);
                      ...
                    }
      - patterns:
          - pattern-inside: |
              function $HANDLER(...) {
                ...
                $SRC = $_FILES[...];
                ...
              }
          - pattern: |
              move_uploaded_file($SRC['tmp_name'], $DEST)
          # Combined content analysis exemptions using pattern-either
          - pattern-not-inside:
              pattern-either:
                - pattern-inside: |
                    function $HANDLER(...) {
                      ...
                      exif_imagetype(...);
                      ...
                    }
                - pattern-inside: |
                    function $HANDLER(...) {
                      ...
                      getimagesize(...);
                      ...
                    }
                - pattern-inside: |
                    function $HANDLER(...) {
                      ...
                      $DATA = file_get_contents(...);
                      ...
                    }
                - pattern-inside: |
                    function $HANDLER(...) {
                      ...
                      imagecreatefromstring(...);
                      ...
                    }
      - patterns:
          - pattern-inside: |
              function $HANDLER(...) {
                ...
              }
          - pattern: |
              $UPLOAD = wp_handle_upload($FILE, ...)
          # Combined content analysis exemptions using pattern-either
          - pattern-not-inside:
              pattern-either:
                - pattern-inside: |
                    function $HANDLER(...) {
                      ...
                      exif_imagetype(...);
                      ...
                    }
                - pattern-inside: |
                    function $HANDLER(...) {
                      ...
                      getimagesize(...);
                      ...
                    }
                - pattern-inside: |
                    function $HANDLER(...) {
                      ...
                      $DATA = file_get_contents(...);
                      ...
                    }
                - pattern-inside: |
                    function $HANDLER(...) {
                      ...
                      imagecreatefromstring(...);
                      ...
                    }

  # WordPress Media Handler Suppressions
  # These functions handle file validation internally and are safe by design
  - id: wordpress.file.upload.media-handler-suppression
    languages: [php]
    message: WordPress media handlers (media_handle_upload, wp_handle_sideload) are safe by design and handle validation internally
    severity: INFO
    metadata:
      category: file-operations
      cwe: CWE-434
      vuln_class: file_upload
      confidence: high
      tags: [info, file-upload, wordpress, media-handlers]
      references:
        - https://developer.wordpress.org/reference/functions/media_handle_upload/
        - https://developer.wordpress.org/reference/functions/wp_handle_sideload/
    patterns:
      # Suppress when media_handle_upload is used (WordPress handles validation)
      - pattern: |
          $ATTACHMENT_ID = media_handle_upload($FILE, $POST_ID, ...);
      # Suppress when wp_handle_sideload is used (WordPress handles validation)
      - pattern: |
          $ATTACHMENT_ID = wp_handle_sideload($FILE, $POST_ID, ...);
      # Suppress when these handlers are used in conditional contexts
      - pattern: |
          if (media_handle_upload($FILE, $POST_ID, ...)) { ... }
      - pattern: |
          if (wp_handle_sideload($FILE, $POST_ID, ...)) { ... }

